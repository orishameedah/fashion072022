Creating a blog project using MERN (MongoDB, ExpressJS, ReactJS, NodeJS)
MongoDB - is a database which stores documents in collections. (in mongodb collections means an array of object,while the documet means the indivdual object)
NodeJS - is a javascript engine originally built for browser now can work without a browser and having some extra APIs.
And also use to run the javascript outside the browser.
ExpressJS - is a server use for production purpose.Also is a framework for NodeJS which helps to ease the process. (framework 
means an inbuilt layout, library so an express js server is an inbuilt node.js server )
ReactJS - is a javascript library for building frontend development (user interfaces), (library are like where the functions and predefined methods are stored).
In this project we are using redux to handle the authentication state, MongoDB to handle database operations, mongoose to handle the relations
between the multiple collections.
Relations between collections
. Each User have can have a multiple blogs which (an array or collections)
. Each blog Belongs to Only Single User (only one user can be allow to own a blog in which another user can't use)
Application Parts
BACKEND: NodeJS, MongoDB, ExpressJS, JWT(Json Web Token), BcryptJS
FRONTEND: ReactJS, Redux, React Router, Axios, MaterialUI
DEPENDENCIES FOR BACKEND:
1. First Installation of Nodemon: Is use in for file changes in a file
2. Installation for expresss js for fast and easy process on the node.js
3. Installation of Mongoose for the connection of our application and mongodb
4. Installation of BcryptJS for the encryption of our password (protection against fruad bad hackers so bcryptjs will encode our password)
5. Installation of CORS for the access of xtmlhttprequest to the frontend
DEPENDENCIES FOR FRONTEND:
1. First Installation of React-Router-Dom: For linking of the two or more components together to work as one 
2. Installation of React-Redux: Will be the one storing of our datas to the user interfaces
3. Installation of Axios to use the request from the frontend to the backend or fetching of the request from frontend to backend

DEPLOYMENT FOR BACKEND ON HEROKU APP
1. create an account on heroku app.com
2. create a new project name by clicking on create new project
3. after create the project go back to ur visual studio code and navigate to your backend folder create a new file called 
    Procfile which will be use in your heroku deployment on command line to let heroku to be able to startup your backend folder
4. create a gitignore file to ignore your node_modules while deploying or else it will lead to deployment failed because 
heroku has an inbuilt way of installating dependencies.
5. in your package.json file add "build: "npm install" which will be use to install your dependencies when heroku is deploying
6. before starting your deployment go to your heroku app on the browser navigate to your new project click on settings then
    click on config vars which is an enviromental variable that will use when serving up your application like ur mongodb url
    heroku doesnot understand it so u will have to add to ur config vars for it to understand
7. then finally the deployment of your backend so on your heroku app project again click on deploy then copy the deployment
    steps to ur node terminal but first u must do heroku login and or do this git init, git status, git add ., git commit -m "deployment"
    then now paste the deploy command which is heroku git:remote -a fashion-blog-backend, then git push heroku master
8. so done with deployment but before doing anything do heroku logs if u see that the last log was connected to mongodb then
    congratulations ur backend was successfully deployed but remember when you paste on the url backend on the browser it will 
    show anything because our backend it been use on postman so instead copy the url to ur postman and add the api which 
    https://......../api/user/ or whatever so if the api is working fine on your postman then move to your frontend for full 
    deployment
9. lastly deployment to github go to github.com, create an account, create a new respository then on your terminal navigate 
    back to your backend folder and then push it on to github by doing this git init, git status, git add ., git commit -m "deployment",
    then git push https://github.com/orishameedah/fashionapp.git to push it on to the git respository done.......

DEPLOYMENT OF FRONTEND ON NETLIFY APP 
1. Go to netlify.app.com create an account
2. click on add new sites on the dropdown you will see import from an existing project so since we have push our blogapp 
    to github we will choose the it from netlify so after clicking on import from an existing project it would from which 
    project so click on github after that it will authenticate u and then ask u some qustions
3. after authenticating successfully u will then have to click on your existing project from github after that u will see
    some command so type frontend as the base directory, then automatically it will also show frontend/dist it will only 
    tell u that u can only have eiher sites or dist or public so since build it not there i wlll go back to my vscode and 
    it frontend/build to frontend/dist because that is the folder that will serve it for us so then done and then click on 
    deploy sites
4. now our frontend app but will have issue with our backend api in our frontend so will have to go back to our vscode 
    change the local backend to the backend url deploy on heroku like https://fashion-blog-backend/api/ into all your 
    components but then we are not done yet now you have to go to ur sites in the netlify click on site settings and then
    click on build & deploy now scroll down then u will add enviromental variable now add ur backend url and cloudinary url
    onto it then go back to click on deploy click on trigger deploy dropdown then click on clear cache and deploy site
    after that u will see a small board like a terminal which is why the deployment will take place so if the deployment 
    deploys successfully then ur frontend is ready to be view on the browser done.....